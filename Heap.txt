#include <stdio.h>
#include <stdlib.h>

#define MAX_ELEMENT 200
typedef struct {
   int key;
} element;
typedef struct {
   element heap[MAX_ELEMENT];
   int heap_size;
} HeapType;

// 초기화 함수
init(HeapType *h)
{
   h->heap_size = 0;
}
// 히프 내용 출력 함수
print_heap(HeapType *h)
{
   int i;
   int level = 1;
   printf("\n===================");
   for (i = 1; i <= h->heap_size; i++) {
      if (i == level) {
         printf("\n");
         level *= 2;
      }
      printf("\t%d", h->heap[i].key);
   }
   printf("\n===================");
}
// 삽입 함수
void insert(HeapType *h, element item)
{
   int i;
   i = ++(h->heap_size);

   //  트리를 거슬러 올라가면서 부모 노드와 비교하는 과정
   while ((i != 1) && (item.key < h->heap[i / 2].key)) {
      h->heap[i] = h->heap[i / 2];
      i /= 2;
   }
   h->heap[i] = item;     // 새로운 노드를 삽입
}
// 삭제 함수
element c(HeapType *h)
{
   int parent, child;
   element item, temp;

   item = h->heap[1];
   temp = h->heap[(h->heap_size)--];
   parent = 1;
   child = 2;
   while (child <= h->heap_size) {
      // 현재 노드의 자식노드중 더 작은 자식노드를 찾는다.
      if ((child < h->heap_size) &&
         (h->heap[child].key) > h->heap[child + 1].key)
         child++;
      if (temp.key <= h->heap[child].key) break;
      // 한단계 아래로 이동
      h->heap[parent] = h->heap[child];
      parent = child;
      child *= 2;
   }
   h->heap[parent] = temp;
   return item;
}



// 주함수 
void main()
{
   element e1 = { 9 }, e2 = { 7 }, e3 = { 3 }, e4 = { 5 }, e5 = { 1 }, e6 = { 10 }, e7 = { 6 }, e8 = { 4 }, e9 = { 6 }, e10 = { 2 };
   HeapType heap;   // 히프 생성
   init(&heap);      // 초기화
                  // 삽입



   int arr[10] = { 0 };


   insert(&heap, e1);
   insert(&heap, e2);
   insert(&heap, e3);
   insert(&heap, e4);
   insert(&heap, e5);
   insert(&heap, e6);
   insert(&heap, e7);
   insert(&heap, e8);
   insert(&heap, e9);
   insert(&heap, e10);

   print_heap(&heap);
   system("pause");

   // 삭제

   for (int i = 0; i < 10; i++) {
      element temp;
      temp = c(&heap);
      printf("\n< %d > ", temp.key);
      print_heap(&heap);
      arr[i] = temp.key;
      printf("\n");
      for (int j = 0; j <= i; j++)
         printf("%d", arr[j]);
      printf("\n");
      system("pause");
   }
}